- name: update operating system
  hosts: all
  become: true
  tasks:
    - name: update apt
      apt:
        update_cache: yes
  
- name: Install Docker Compose
  hosts: all
  become: true
  tasks:
    - name: Install docker-compose
      apt:
        name: docker-compose
        state: present
        update_cache: yes

- name: Configure Kubernetes Master
  hosts: master
  become: true
  tasks:
    - name: Download k8s-master.sh
      get_url:
        url: https://raw.githubusercontent.com/akshu20791/Deployment-script/main/k8s-master.sh
        dest: /root/k8s-master.sh
        mode: '0777'

    - name: Execute k8s-master.sh
      shell: /root/k8s-master.sh
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Configure br_netfilter
      shell: |
        modprobe br_netfilter
        echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
        echo 1 > /proc/sys/net/ipv4/ip_forward

    - name: Get join command
      shell: kubeadm token create --print-join-command
      register: join_command

    - name: Store join command
      set_fact:
        join_command: "{{ join_command.stdout_lines[0] }} --cri-socket unix:///var/run/cri-dockerd.sock"

- name: Configure Kubernetes Workers
  hosts: workers
  become: true
  tasks:
    - name: Download k8s-nodes.sh
      get_url:
        url: https://raw.githubusercontent.com/akshu20791/Deployment-script/main/k8s-nodes.sh
        dest: /root/k8s-nodes.sh
        mode: '0777'

    - name: Execute k8s-nodes.sh
      shell: /root/k8s-nodes.sh
      args:
        creates: /usr/bin/kubelet

    - name: Configure br_netfilter
      shell: |
        modprobe br_netfilter
        echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
        echo 1 > /proc/sys/net/ipv4/ip_forward

    - name: Join cluster
      shell: "{{ hostvars['13.217.116.56'].join_command }}"
      args:
        creates: /etc/kubernetes/kubelet.conf

    - name: Install cri-dockerd
      shell: |
        VERSION=0.3.4
        wget -O /tmp/cri-dockerd.deb https://github.com/Mirantis/cri-dockerd/releases/download/v${VERSION}/cri-dockerd_${VERSION}-0.ubuntu-jammy_amd64.deb
        dpkg -i /tmp/cri-dockerd.deb
      args:
        creates: /usr/bin/cri-dockerd

    - name: Start cri-dockerd
      systemd:
        name: cri-docker.service
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Install Kubernetes components
      shell: |
        RELEASE=v1.28.1
        cd /tmp
        curl -LO "https://dl.k8s.io/release/${RELEASE}/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/release/${RELEASE}/bin/linux/amd64/kubeadm"
        curl -LO "https://dl.k8s.io/release/${RELEASE}/bin/linux/amd64/kubelet"
        chmod +x kubectl kubeadm kubelet
        mv kubectl kubeadm kubelet /usr/local/bin/
        curl -sSL https://raw.githubusercontent.com/kubernetes/release/v0.14.0/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service | sudo tee /etc/systemd/system/kubelet.service
        mkdir -p /etc/systemd/system/kubelet.service.d
        curl -sSL https://raw.githubusercontent.com/kubernetes/release/v0.14.0/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      args:
        creates: /usr/local/bin/kubectl

    - name: Start kubelet service
      systemd:
        name: kubelet
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Load br_netfilter module
      modprobe:
        name: br_netfilter
        state: present

    - name: Ensure br_netfilter module is loaded at boot
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: br_netfilter
        create: yes
        mode: '0644'

    - name: Enable bridge-nf-call-iptables
      shell: |
        echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables
        echo '1' > /proc/sys/net/bridge/bridge-nf-call-ip6tables
        echo 'net.bridge.bridge-nf-call-iptables=1' >> /etc/sysctl.conf
        echo 'net.bridge.bridge-nf-call-ip6tables=1' >> /etc/sysctl.conf
        sysctl -p
      args:
        creates: /proc/sys/net/bridge/bridge-nf-call-iptables

    - name: Disable swap
      command: swapoff -a
      changed_when: false

    - name: Remove swap from fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*\sswap\s+sw\s+.*)$'
        replace: '# \1'

- name: Configure Kubernetes Master
  hosts: master
  become: true
  tasks:
    - name: Initialize Kubernetes cluster
      shell: |
        kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket=unix:///var/run/cri-dockerd.sock
      register: kubeadm_init
      changed_when: false
      ignore_errors: yes

    - name: Create .kube directory
      file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Install Flannel CNI
      become: false
      command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
      changed_when: false

    - name: Get join command
      command: kubeadm token create --print-join-command
      register: join_command
      changed_when: false

    - name: Store join command
      set_fact:
        join_command: "{{ join_command.stdout }}"

- name: Configure Kubernetes Workers
  hosts: workers
  become: true
  tasks:
    - name: Join cluster
      command: "{{ hostvars['master'].join_command }}"
      register: join_cluster
      changed_when: false
      ignore_errors: yes

- name: Install Jenkins on Master
  hosts: master
  become: true
  tasks:
    - name: Install Java
      apt:
        name: openjdk-11-jdk
        state: present
        update_cache: yes

    - name: Add Jenkins repository key
      apt_key:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        state: present

    - name: Add Jenkins repository
      apt_repository:
        repo: deb https://pkg.jenkins.io/debian-stable binary/
        state: present
        filename: jenkins

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present
        update_cache: yes

    - name: Ensure Jenkins user exists
      user:
        name: jenkins
        system: yes
        shell: /bin/bash
        home: /var/lib/jenkins
        createhome: yes

    - name: Set Jenkins directory permissions
      file:
        path: /var/lib/jenkins
        owner: jenkins
        group: jenkins
        mode: '0755'
        state: directory

    - name: Start Jenkins service
      systemd:
        name: jenkins
        state: started
        enabled: yes
        daemon_reload: yes
      register: jenkins_start
      ignore_errors: yes

    - name: Check Jenkins logs if start failed
      command: journalctl -u jenkins.service --no-pager -n 50
      register: jenkins_logs
      when: jenkins_start.failed

    - name: Display Jenkins logs if start failed
      debug:
        var: jenkins_logs.stdout_lines
      when: jenkins_start.failed

    - name: Wait for Jenkins to start up
      uri:
        url: http://localhost:8080
        status_code: 200
        timeout: 5
      register: jenkins_status
      retries: 12
      delay: 5
      until: jenkins_status.status == 200
      ignore_errors: yes

    - name: Get Jenkins initial admin password
      command: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: jenkins_password
      changed_when: false

    - name: Display Jenkins initial admin password
      debug:
        var: jenkins_password.stdout

- name: Verify Kubernetes Setup
  hosts: master
  become: false
  tasks:
    - name: Wait for nodes to be ready
      shell: kubectl get nodes | grep Ready | wc -l
      register: ready_nodes
      until: ready_nodes.stdout | int >= 3  # 1 master + 2 workers
      retries: 30
      delay: 10
      changed_when: false

    - name: Show cluster status
      command: kubectl get nodes -o wide
      register: cluster_status
      changed_when: false

    - name: Display cluster status
      debug:
        var: cluster_status.stdout_lines

    - name: Copy test deployment file
      copy:
        src: test-deployment.yml
        dest: /home/ubuntu/test-deployment.yml

    - name: Apply test deployment
      command: kubectl apply -f /home/ubuntu/test-deployment.yml
      register: test_deployment
      changed_when: false

    - name: Wait for test pod to be ready
      shell: kubectl get pods | grep nginx-test | grep Running | wc -l
      register: test_pod
      until: test_pod.stdout | int >= 1
      retries: 30
      delay: 10
      changed_when: false

    - name: Show test deployment status
      command: kubectl get pods
      register: pod_status
      changed_when: false

    - name: Display test deployment status
      debug:
        var: pod_status.stdout_lines
